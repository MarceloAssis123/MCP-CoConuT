/**
 * Storage and conclusion module for CoConuT
 * Generates conclusions and explanations of changes made in the chain of thoughts
 */

import * as fs from 'fs';
import * as path from 'path';
import { ThoughtEntry, CoConuTConfig, SavedFileInfo, CoConuTStorageParams } from './types';
import { Logger } from './logger';
import { StorageProvider } from './storage';

/**
 * Interface para metadados de conclus√£o
 */
interface ConclusionMetadata {
    id: string;
    timestamp: string;
    category: string;
    subCategories: string[];
    tags: string[];
    impactLevel: 'low' | 'medium' | 'high';
    affectedFiles: string[];
    relatedConclusions: string[];
    ticketReference?: string;
    businessContext?: string;
    technicalContext?: string;
    thoughtNumbers?: number[];
}

/**
 * Interface para o sistema de templates
 */
interface ConclusionTemplate {
    name: string;
    template: string;
}

/**
 * Interface para mensagens internacionalizadas
 */
interface I18nMessages {
    [key: string]: {
        [locale: string]: string;
    };
}

/**
 * Classe respons√°vel por gerar conclus√µes e salvar o hist√≥rico final de pensamentos
 */
export class CoConuT_Storage {
    private logger: Logger;
    private storageProvider: StorageProvider;
    private config: CoConuTConfig;
    private locale: string = 'en'; // Default locale
    private templates: Map<string, ConclusionTemplate> = new Map();
    private searchIndex: Map<string, Set<string>> = new Map();

    /**
     * Mensagens internacionalizadas do sistema
     */
    private i18n: I18nMessages = {
        'error.no.path': {
            'en': 'No path provided to save files',
            'pt': 'Nenhum caminho foi fornecido para salvar os arquivos'
        },
        'info.adding.content': {
            'en': 'Adding new entry to existing conclusion file',
            'pt': 'Adicionando nova entrada ao arquivo de conclus√£o existente'
        },
        'info.creating.file': {
            'en': 'Creating new conclusion file',
            'pt': 'Criando novo arquivo de conclus√£o'
        },
        'error.saving.conclusion': {
            'en': 'Error saving conclusion',
            'pt': 'Erro ao salvar conclus√£o'
        },
        'error.adding.conclusion': {
            'en': 'Error adding text to conclusion file',
            'pt': 'Erro ao adicionar texto ao arquivo de conclus√£o'
        },
        'error.processing.conclusion': {
            'en': 'Failed to process conclusion',
            'pt': 'Falha ao processar conclus√£o'
        }
    };

    constructor(storageProvider: StorageProvider, config: CoConuTConfig) {
        this.storageProvider = storageProvider;
        this.config = config;
        this.logger = Logger.getInstance();

        // Verificar se o caminho do projeto est√° presente
        if (!config.projectPath) {
            this.logger.warn('CoConuT_Storage: No project path configured. It will need to be provided in processConclusion');
        }

        // Registrar o template padr√£o
        this.registerDefaultTemplates();
    }

    /**
     * M√©todo para traduzir mensagens
     * @param key Chave da mensagem no dicion√°rio
     * @param replacements Substitui√ß√µes a serem feitas na mensagem
     * @returns A mensagem traduzida
     */
    private t(key: string, replacements: Record<string, string> = {}): string {
        const message = this.i18n[key]?.[this.locale] || key;
        return message.replace(/\{(\w+)\}/g, (_, k) => replacements[k] || `{${k}}`);
    }

    /**
     * Define o idioma a ser usado pelo sistema
     * @param locale C√≥digo do idioma (en, pt, etc)
     */
    public setLocale(locale: string): void {
        if (Object.keys(this.i18n).some(key => this.i18n[key][locale])) {
            this.locale = locale;
            this.logger.info(`Locale set to ${locale}`);
        } else {
            this.logger.warn(`Locale ${locale} not supported, using ${this.locale}`);
        }
    }

    /**
     * Registra templates padr√£o
     */
    private registerDefaultTemplates(): void {
        this.registerTemplate('default', `## Conclus√£o da Cadeia de Pensamentos

### üîç Por que a mudan√ßa foi necess√°ria
{whyChange}

### ‚úÖ O que foi mudado
{whatChange}
`);

        this.registerTemplate('detailed', `## Conclus√£o da Cadeia de Pensamentos

---
id: "{id}"
timestamp: "{timestamp}"
category: "{category}"
impactLevel: "{impactLevel}"
---

### üìã Contexto
{context}

### üîç Por que a mudan√ßa foi necess√°ria
{whyChange}

### ‚úÖ O que foi mudado
{whatChange}

### üìä Impacto
**N√≠vel de impacto:** {impactLevel}

### üìÅ Arquivos afetados
{affectedFiles}

### üîÑ Alternativas consideradas
{alternatives}

### üß™ Testes realizados
{testing}

### üîó Conclus√µes relacionadas
{relatedConclusions}
`);
    }

    /**
     * Registra um novo template
     * @param name Nome do template
     * @param template Template em formato de string com placeholders
     */
    public registerTemplate(name: string, template: string): void {
        this.templates.set(name, { name, template });
        this.logger.info(`Template ${name} registered`);
    }

    /**
     * Renderiza um template com os dados fornecidos
     * @param templateName Nome do template a ser renderizado
     * @param data Dados a serem inseridos no template
     * @returns Template renderizado
     */
    private renderTemplate(templateName: string, data: Record<string, any>): string {
        const template = this.templates.get(templateName);
        if (!template) {
            this.logger.warn(`Template ${templateName} not found, using default`);
            return this.renderTemplate('default', data);
        }

        // Renderiza√ß√£o simples com substitui√ß√£o de placeholders
        return template.template.replace(/\{(\w+)\}/g, (_, key) => {
            if (data[key] === undefined) return `{${key}}`;
            if (Array.isArray(data[key])) {
                if (data[key].length === 0) return '';
                return data[key].map((item: any) => `- ${item}`).join('\n');
            }
            return data[key].toString();
        });
    }

    /**
     * Adiciona conte√∫do ao √≠ndice de busca
     * @param id ID √∫nico da conclus√£o
     * @param content Conte√∫do a ser indexado
     */
    private indexContent(id: string, content: string): void {
        try {
            // Extrair palavras do conte√∫do
            const words = content.toLowerCase()
                .replace(/[^\p{L}\s]/gu, ' ') // Remove caracteres n√£o-alfab√©ticos
                .split(/\s+/)
                .filter(word => word.length > 3); // Ignorar palavras muito curtas

            // Adicionar ao √≠ndice
            words.forEach(word => {
                if (!this.searchIndex.has(word)) {
                    this.searchIndex.set(word, new Set());
                }
                this.searchIndex.get(word)?.add(id);
            });

            this.logger.debug(`Indexed ${words.length} unique words for conclusion ${id}`);
        } catch (error) {
            this.logger.error('Error indexing content', { error });
        }
    }

    /**
     * Busca conclus√µes no √≠ndice
     * @param query Query de busca
     * @returns Array de IDs de conclus√µes ordenados por relev√¢ncia
     */
    public searchConclusions(query: string): string[] {
        try {
            const searchTerms = query.toLowerCase()
                .replace(/[^\p{L}\s]/gu, ' ')
                .split(/\s+/)
                .filter(word => word.length > 3);

            const results: Map<string, number> = new Map();

            // Buscar cada termo
            searchTerms.forEach(term => {
                const ids = this.searchIndex.get(term);
                if (ids) {
                    ids.forEach(id => {
                        results.set(id, (results.get(id) || 0) + 1);
                    });
                }
            });

            // Ordenar por relev√¢ncia e retornar IDs
            return Array.from(results.entries())
                .sort((a, b) => b[1] - a[1])
                .map(([id]) => id);
        } catch (error) {
            this.logger.error('Error searching conclusions', { error });
            return [];
        }
    }

    /**
     * Gera uma conclus√£o e salva o hist√≥rico de pensamentos
     * @param thoughts Hist√≥rico de pensamentos para processar
     * @param projectPath Caminho do projeto onde os arquivos ser√£o salvos
     * @param whyChange Motivo da mudan√ßa
     * @param whatChange Descri√ß√£o da mudan√ßa
     * @param params Par√¢metros adicionais opcionais
     * @returns Array com informa√ß√µes dos arquivos salvos
     */
    public async processConclusion(thoughts: ThoughtEntry[], projectPath: string, whyChange: string, whatChange: string, params?: Partial<CoConuTStorageParams>): Promise<SavedFileInfo[]> {
        try {
            // Verificar e configurar o caminho do projeto
            if (!projectPath) {
                throw new Error(this.t('error.no.path'));
            }

            // Atualizar o caminho do projeto na configura√ß√£o
            this.config.projectPath = projectPath;

            // Mesclar par√¢metros recebidos
            const fullParams: Partial<CoConuTStorageParams> = {
                ...params,
                projectPath,
                WhyChange: whyChange,
                WhatChange: whatChange
            };

            // Gerar conclus√£o baseada nos par√¢metros fornecidos
            const conclusion = this.generateCustomConclusion(whyChange, whatChange, fullParams);

            // Adicionar a conclus√£o como um metadado ao √∫ltimo pensamento
            const lastThought = thoughts[thoughts.length - 1];
            if (lastThought) {
                lastThought.metadata = lastThought.metadata || {};
                lastThought.metadata.conclusion = conclusion;
                lastThought.metadata.whyChange = whyChange;
                lastThought.metadata.whatChange = whatChange;

                // Adicionar metadados enriquecidos
                if (params) {
                    lastThought.metadata.category = params.category;
                    lastThought.metadata.tags = params.tags;
                    lastThought.metadata.impactLevel = params.impactLevel;
                }
            }

            // Salvar todos os pensamentos
            const savedFiles: SavedFileInfo[] = [];
            for (const thought of thoughts) {
                try {
                    const fileInfo = await this.storageProvider.saveThought(thought);
                    if (fileInfo) {
                        savedFiles.push(fileInfo);
                    }
                } catch (thoughtError) {
                    this.logger.error('Error saving individual thought', { thoughtError, thoughtNumber: thought.thoughtNumber });
                    // Continuar tentando salvar os outros pensamentos
                }
            }

            // Registrar a conclus√£o em um arquivo separado
            const conclusionFileInfo = await this.saveConclusion(conclusion, projectPath);
            if (conclusionFileInfo) {
                savedFiles.push(conclusionFileInfo);
            }

            return savedFiles;
        } catch (error: any) {
            this.logger.error(this.t('error.processing.conclusion'), { error });
            throw new Error(`${this.t('error.processing.conclusion')}: ${error?.message || 'Unknown error'}`);
        }
    }

    /**
     * Automatically records a summary of the current interaction in the conclusion.md file
     * @param projectPath Project path where the files will be saved
     * @param interactionSummary An object containing information about the current interaction
     * @returns Information about the saved file or null in case of error
     */
    public async appendInteractionSummary(
        projectPath: string,
        interactionSummary: {
            thoughtNumber: number,
            totalThoughts: number,
            what: string,
            why: string
        }
    ): Promise<SavedFileInfo | null> {
        try {
            // Verify and configure the project path
            if (!projectPath) {
                throw new Error("A path must be provided to save the interaction summary");
            }

            // Create interaction summary text
            const summary = `## Resumo da Intera√ß√£o ${interactionSummary.thoughtNumber}/${interactionSummary.totalThoughts}

### Por que foi feito
${interactionSummary.why}

### O que foi feito
${interactionSummary.what}`;

            // Save the summary to the conclusion.md file
            return await this.appendToConclusion(summary, projectPath);
        } catch (error: any) {
            this.logger.error('Error recording interaction summary', { error });
            return null;
        }
    }

    /**
     * Gera metadados para a conclus√£o a partir dos par√¢metros fornecidos
     * @param thoughts Array de pensamentos (opcional)
     * @param params Par√¢metros adicionais
     * @returns Objeto de metadados estruturado
     */
    private generateMetadata(thoughts?: ThoughtEntry[], params?: Partial<CoConuTStorageParams>): ConclusionMetadata {
        try {
            const now = new Date();
            const metadata: ConclusionMetadata = {
                id: `conclusion-${now.getTime()}`,
                timestamp: now.toISOString(),
                category: params?.category || 'unspecified',
                subCategories: params?.subCategories || [],
                tags: params?.tags || [],
                impactLevel: params?.impactLevel || 'medium',
                affectedFiles: params?.affectedFiles || [],
                relatedConclusions: params?.relatedConclusions || [],
                ticketReference: params?.ticketReference || '',
                businessContext: params?.businessContext || '',
                technicalContext: params?.technicalContext || ''
            };

            // Adicionar n√∫meros dos pensamentos se dispon√≠veis
            if (thoughts && thoughts.length > 0) {
                metadata.thoughtNumbers = thoughts.map(t => t.thoughtNumber);
            }

            return metadata;
        } catch (error) {
            this.logger.error('Error generating metadata', { error });
            // Retornar metadados m√≠nimos em caso de erro
            return {
                id: `conclusion-${Date.now()}`,
                timestamp: new Date().toISOString(),
                category: 'unspecified',
                subCategories: [],
                tags: [],
                impactLevel: 'medium',
                affectedFiles: [],
                relatedConclusions: []
            };
        }
    }

    /**
     * Generates a custom conclusion based on the provided parameters
     * @param whyChange Reason for the change
     * @param whatChange Description of the change
     * @param params Additional parameters
     * @returns Formatted conclusion string
     */
    private generateCustomConclusion(whyChange: string, whatChange: string, params?: Partial<CoConuTStorageParams>): string {
        try {
            // Gerar metadados
            const metadata = this.generateMetadata(undefined, params);

            // Serializar metadados para armazenamento
            const metadataJson = JSON.stringify(metadata, null, 2);

            // Preparar dados para o template
            const templateData: Record<string, any> = {
                ...metadata,
                whyChange,
                whatChange,
                context: this.formatContext(metadata),
                affectedFiles: this.formatAffectedFiles(metadata.affectedFiles),
                alternatives: this.formatAlternatives(params?.alternativesConsidered || []),
                testing: params?.testingPerformed || '',
                relatedConclusions: this.formatRelatedConclusions(metadata.relatedConclusions)
            };

            // Renderizar com o template detalhado
            let markdown = this.renderTemplate('detailed', templateData);

            // Adicionar snippets de c√≥digo se houver
            if (params?.codeSnippets && params.codeSnippets.length > 0) {
                markdown += this.formatCodeSnippets(params.codeSnippets);
            }

            // Armazenar metadados JSON em coment√°rio HTML para facilitar extra√ß√£o program√°tica
            markdown += `\n<!-- metadata\n${metadataJson}\n-->\n`;

            return markdown;
        } catch (error) {
            this.logger.error('Error generating custom conclusion', { error });
            // Fallback simples em caso de erro
            return `## Conclus√£o da Cadeia de Pensamentos\n\n### Por que a mudan√ßa foi necess√°ria\n${whyChange}\n\n### O que foi mudado\n${whatChange}\n\n`;
        }
    }

    /**
     * Formata a se√ß√£o de contexto
     */
    private formatContext(metadata: ConclusionMetadata): string {
        try {
            let context = '';

            if (metadata.businessContext) {
                context += `#### Contexto de Neg√≥cio\n${metadata.businessContext}\n\n`;
            }

            if (metadata.technicalContext) {
                context += `#### Contexto T√©cnico\n${metadata.technicalContext}\n\n`;
            }

            return context || 'Nenhum contexto adicional fornecido.';
        } catch (error) {
            return 'Erro ao formatar contexto.';
        }
    }

    /**
     * Formata a lista de arquivos afetados
     */
    private formatAffectedFiles(files: string[]): string {
        try {
            if (!files || files.length === 0) {
                return 'Nenhum arquivo afetado especificado.';
            }

            return files.map(file => `- \`${file}\``).join('\n');
        } catch (error) {
            return 'Erro ao formatar arquivos afetados.';
        }
    }

    /**
     * Formata as alternativas consideradas
     */
    private formatAlternatives(alternatives: string[]): string {
        try {
            if (!alternatives || alternatives.length === 0) {
                return 'Nenhuma alternativa considerada foi especificada.';
            }

            return alternatives.map((alt, i) => `${i + 1}. ${alt}`).join('\n');
        } catch (error) {
            return 'Erro ao formatar alternativas consideradas.';
        }
    }

    /**
     * Formata as conclus√µes relacionadas
     */
    private formatRelatedConclusions(conclusions: string[]): string {
        try {
            if (!conclusions || conclusions.length === 0) {
                return 'Nenhuma conclus√£o relacionada.';
            }

            return conclusions.map(ref => `- ${ref}`).join('\n');
        } catch (error) {
            return 'Erro ao formatar conclus√µes relacionadas.';
        }
    }

    /**
     * Formata os snippets de c√≥digo
     */
    private formatCodeSnippets(snippets: Array<{ before: string, after: string, file: string }>): string {
        try {
            if (!snippets || snippets.length === 0) return '';

            let result = `\n### üíª Altera√ß√µes de c√≥digo\n`;

            snippets.forEach((snippet, index) => {
                result += `#### Altera√ß√£o ${index + 1} em \`${snippet.file}\`\n`;
                result += `**Antes:**\n\`\`\`\n${snippet.before}\n\`\`\`\n\n`;
                result += `**Depois:**\n\`\`\`\n${snippet.after}\n\`\`\`\n\n`;
            });

            return result;
        } catch (error) {
            return '\n### üíª Erro ao formatar snippets de c√≥digo\n';
        }
    }

    /**
     * Gera uma conclus√£o baseada no hist√≥rico de pensamentos
     */
    private generateConclusion(thoughts: ThoughtEntry[]): string {
        // Extrair t√≥picos principais dos pensamentos
        const topics = this.extractMainTopics(thoughts);

        // Identificar mudan√ßas e decis√µes principais
        const changes = this.identifyKeyChanges(thoughts);

        // Formatar conclus√£o
        return `## Conclus√£o da Cadeia de Pensamentos

### Resumo
${this.generateSummary(thoughts)}

### Principais Decis√µes
${changes.map(change => `- ${change}`).join('\n')}

### Motivos das Mudan√ßas
${this.explainChanges(thoughts)}
`;
    }

    /**
     * Extrai os principais t√≥picos abordados nos pensamentos
     * @param thoughts Array de pensamentos para analisar
     * @returns Array de t√≥picos principais
     */
    private extractMainTopics(thoughts: ThoughtEntry[]): string[] {
        try {
            // Lista de stop words em portugu√™s e ingl√™s
            const stopWords = new Set([
                // Portugu√™s
                'o', 'a', 'os', 'as', 'um', 'uma', 'uns', 'umas', 'de', 'do', 'da', 'dos', 'das',
                'em', 'no', 'na', 'nos', 'nas', 'para', 'por', 'pelo', 'pela', 'pelos', 'pelas',
                'com', 'que', 'se', 'como', 'mas', 'ou', 'e', 'foi', 'ser', 'est√°', 's√£o', 'estar',
                // Ingl√™s
                'the', 'a', 'an', 'of', 'in', 'on', 'at', 'to', 'for', 'with', 'by', 'about',
                'like', 'through', 'over', 'before', 'after', 'between', 'and', 'but', 'or', 'as',
                'if', 'than', 'because', 'while', 'where', 'how', 'when', 'what', 'who', 'is', 'are',
                'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did',
                'can', 'could', 'shall', 'should', 'will', 'would', 'may', 'might'
            ]);

            // Combinar todo o texto de pensamentos
            const allText = thoughts.map(t => t.thought).join(' ');

            // Dividir em palavras, filtrar stop words e palavras curtas
            const words = allText.toLowerCase()
                .replace(/[^\p{L}\s]/gu, ' ') // Remove caracteres n√£o-alfab√©ticos
                .split(/\s+/)
                .filter(word => !stopWords.has(word) && word.length > 4);

            // Contar ocorr√™ncias de palavras
            const wordCount: Record<string, number> = {};
            words.forEach(word => {
                wordCount[word] = (wordCount[word] || 0) + 1;
            });

            // Extrair frases importantes (bigramas e trigramas)
            const phrases: Record<string, number> = {};
            for (let i = 0; i < thoughts.length; i++) {
                const sentences = thoughts[i].thought.split(/[.!?;]+/);
                for (const sentence of sentences) {
                    // An√°lise simples de import√¢ncia: se contiver palavras-chave frequentes
                    const sentenceWords = sentence.toLowerCase().split(/\s+/);
                    const score = sentenceWords.reduce((sum, word) => sum + (wordCount[word] || 0), 0);
                    if (score > 5 && sentence.length > 20) {
                        const phrase = sentence.trim();
                        if (phrase.length > 0) {
                            phrases[phrase] = (phrases[phrase] || 0) + score;
                        }
                    }
                }
            }

            // Encontrar palavras-chave ponderadas por frequ√™ncia e posi√ß√£o no texto
            const weightedWords: Record<string, number> = {};
            Object.entries(wordCount).forEach(([word, count]) => {
                // Considerar palavras no in√≠cio/fim dos pensamentos como mais importantes
                let positionWeight = 0;
                thoughts.forEach(t => {
                    const firstWords = t.thought.split(/\s+/).slice(0, 20).join(' ').toLowerCase();
                    const lastWords = t.thought.split(/\s+/).slice(-20).join(' ').toLowerCase();

                    if (firstWords.includes(word)) positionWeight += 1.5;
                    if (lastWords.includes(word)) positionWeight += 1.2;
                });

                weightedWords[word] = count * (1 + positionWeight);
            });

            // Combinar palavras e frases chave
            const topWords = Object.entries(weightedWords)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 8)
                .map(([word]) => word);

            const topPhrases = Object.entries(phrases)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 3)
                .map(([phrase]) => phrase.length > 50 ? phrase.substring(0, 50) + '...' : phrase);

            return [...topWords, ...topPhrases];
        } catch (error) {
            this.logger.error('Error extracting main topics', { error });
            return ['error', 'extracting', 'topics'];
        }
    }

    /**
     * Identifica as principais mudan√ßas na cadeia de pensamentos
     * @param thoughts Array de pensamentos
     * @returns Array de mudan√ßas identificadas
     */
    private identifyKeyChanges(thoughts: ThoughtEntry[]): string[] {
        try {
            const changes: string[] = [];

            if (!thoughts || thoughts.length < 2) {
                return ["Poucos pensamentos para analisar mudan√ßas significativas"];
            }

            // Analisar revis√µes expl√≠citas
            for (let i = 1; i < thoughts.length; i++) {
                const curr = thoughts[i];

                // Verificar se h√° revis√£o expl√≠cita
                if (curr.metadata?.revisesThought) {
                    const revisedThoughtNum = curr.metadata.revisesThought;
                    const revisedThought = thoughts.find(t => t.thoughtNumber === revisedThoughtNum);

                    if (revisedThought) {
                        const summary = curr.thought.substring(0, 70).trim();
                        changes.push(`Revis√£o do pensamento ${revisedThoughtNum}: ${summary}...`);
                    }
                }

                // Verificar se h√° ramifica√ß√µes
                if (curr.metadata?.branchFromThought) {
                    changes.push(`Nova ramifica√ß√£o a partir do pensamento ${curr.metadata.branchFromThought}`);
                }

                // Verificar necessidade de mais pensamentos
                if (curr.metadata?.needsMoreThoughts) {
                    changes.push("Ajuste no plano: necessidade de mais pensamentos identificada");
                }

                // Verificar mudan√ßas no score/confian√ßa
                if (curr.metadata?.score !== undefined && i > 0 && thoughts[i - 1].metadata?.score !== undefined) {
                    const prevScore = thoughts[i - 1].metadata?.score as number;
                    const currScore = curr.metadata?.score as number;

                    if (Math.abs(currScore - prevScore) >= 2) {
                        const direction = currScore > prevScore ? "aumento" : "diminui√ß√£o";
                        changes.push(`${direction} significativo na confian√ßa (de ${prevScore} para ${currScore})`);
                    }
                }
            }

            // Analisar mudan√ßas sem√¢nticas (abordagem simplificada)
            for (let i = 1; i < Math.min(thoughts.length, 5); i++) {
                const prev = thoughts[i - 1].thought.toLowerCase();
                const curr = thoughts[i].thought.toLowerCase();

                // Verificar nega√ß√µes - indicam poss√≠vel mudan√ßa de dire√ß√£o
                const negationTerms = ['n√£o', 'incorreto', 'errado', 'equivocado', 'falha', 'not', 'incorrect', 'wrong', 'mistaken'];
                const hasNegation = negationTerms.some(term =>
                    !prev.includes(term) && curr.includes(term) ||
                    prev.includes(term) && !curr.includes(term));

                if (hasNegation) {
                    changes.push(`Poss√≠vel mudan√ßa de dire√ß√£o entre os pensamentos ${i} e ${i + 1}`);
                }

                // Termos que indicam descobertas
                const discoveryTerms = ['descobri', 'percebi', 'notei', 'found', 'discovered', 'realized', 'noticed'];
                if (discoveryTerms.some(term => curr.includes(term))) {
                    changes.push(`Nova descoberta ou percep√ß√£o no pensamento ${i + 1}`);
                }
            }

            return changes.length > 0 ? changes : ["N√£o foram identificadas mudan√ßas significativas na cadeia de pensamentos"];
        } catch (error) {
            this.logger.error('Error identifying key changes', { error });
            return ["Erro ao identificar mudan√ßas"];
        }
    }

    /**
     * Gera um resumo da cadeia de pensamentos
     * @param thoughts Array de pensamentos
     * @returns Resumo formatado
     */
    private generateSummary(thoughts: ThoughtEntry[]): string {
        try {
            if (!thoughts || thoughts.length === 0) {
                return "Nenhum pensamento para analisar.";
            }

            // Informa√ß√µes b√°sicas
            const totalThoughts = thoughts.length;
            const hasRevisions = thoughts.some(t => t.metadata?.revisesThought);
            const hasBranches = thoughts.some(t => t.metadata?.branchFromThought);

            // Calcular score m√©dio se dispon√≠vel
            let averageScore = null;
            const scores = thoughts
                .map(t => t.metadata?.score)
                .filter((score): score is number => typeof score === 'number');

            if (scores.length > 0) {
                averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;
            }

            // Identificar padr√µes
            const firstThought = thoughts[0].thought.substring(0, 100) + "...";
            const lastThought = thoughts[thoughts.length - 1].thought.substring(0, 100) + "...";

            // Gerar resumo com os detalhes identificados
            let summary = `Esta cadeia de pensamentos consistiu em ${totalThoughts} passos`;
            if (hasRevisions) summary += ", incluindo revis√µes de pensamentos anteriores";
            if (hasBranches) summary += " e explora√ß√µes de ramifica√ß√µes alternativas";
            summary += ".\n\n";

            summary += `Come√ßou com: "${firstThought}"\n\n`;
            summary += `Concluiu com: "${lastThought}"\n\n`;

            if (averageScore !== null) {
                summary += `A confian√ßa m√©dia nos pensamentos foi de ${averageScore.toFixed(1)}/10.\n\n`;
            }

            // Adicionar informa√ß√µes sobre t√≥picos principais
            const topics = this.extractMainTopics(thoughts).slice(0, 5);
            if (topics.length > 0) {
                summary += `Os principais t√≥picos abordados foram: ${topics.join(', ')}.`;
            }

            return summary;
        } catch (error) {
            this.logger.error('Error generating summary', { error });
            return `Esta cadeia consistiu em ${thoughts.length} pensamentos, explorando v√°rios aspectos do problema.`;
        }
    }

    /**
     * Explica as raz√µes por tr√°s das mudan√ßas realizadas
     * @param thoughts Array de pensamentos
     * @returns Explica√ß√£o formatada
     */
    private explainChanges(thoughts: ThoughtEntry[]): string {
        try {
            // Analisar motivos comuns de mudan√ßas
            const motives = new Set<string>();

            // Analisar metadata em busca de motivos espec√≠ficos
            for (let i = 1; i < thoughts.length; i++) {
                const curr = thoughts[i];

                // Verificar revis√µes
                if (curr.metadata?.revisesThought) {
                    motives.add("Revis√£o de pensamentos anteriores");
                }

                // Verificar mudan√ßas no plano
                if (curr.metadata?.needsMoreThoughts) {
                    motives.add("Adapta√ß√£o do plano devido a novos insights");
                }

                // Verificar ramifica√ß√µes
                if (curr.metadata?.branchFromThought) {
                    motives.add("Explora√ß√£o de abordagens alternativas");
                }
            }

            // Analisar o conte√∫do para motivos de mudan√ßa
            let allText = thoughts.map(t => t.thought).join(' ').toLowerCase();

            // Identificar termos relacionados a corre√ß√£o, adapta√ß√£o, aprendizado
            const motiveIndicators = {
                "Corre√ß√£o de erros ou imprecis√µes": ["corrigi", "corrigir", "corrigido", "erro", "incorreto", "inexato", "fixed", "corrected", "wrong"],
                "Incorpora√ß√£o de novas informa√ß√µes": ["nova informa√ß√£o", "aprendi", "descobri", "nova perspectiva", "discovered", "learned"],
                "Aprofundamento da an√°lise": ["aprofundar", "examinar", "detalhar", "analisar", "deeper", "analyze", "detailed"],
                "Valida√ß√£o de hip√≥teses": ["validar", "testar", "confirmar", "hypothesis", "test", "validate"],
                "Simplifica√ß√£o da abordagem": ["simplificar", "reduzir", "otimizar", "simplify", "optimize"],
                "Adapta√ß√£o √† complexidade do problema": ["complexo", "complexidade", "adaptar", "ajustar", "complex", "adapt"]
            };

            for (const [motive, terms] of Object.entries(motiveIndicators)) {
                if (terms.some(term => allText.includes(term))) {
                    motives.add(motive);
                }
            }

            // Se n√£o encontrou motivos espec√≠ficos, adicionar gen√©ricos
            if (motives.size === 0) {
                motives.add("Melhorar a clareza do racioc√≠nio");
                motives.add("Progress√£o l√≥gica da an√°lise");
                motives.add("Refinamento iterativo da solu√ß√£o");
            }

            // Formatar a explica√ß√£o
            let explanation = `As mudan√ßas foram motivadas principalmente pela necessidade de:`;
            Array.from(motives).forEach(motive => {
                explanation += `\n- ${motive}`;
            });

            return explanation;
        } catch (error) {
            this.logger.error('Error explaining changes', { error });
            return `As mudan√ßas foram motivadas principalmente pela necessidade de refinar o racioc√≠nio e explorar diferentes aspectos do problema.`;
        }
    }

    /**
     * Salva a conclus√£o em um arquivo separado
     * @param conclusion Texto da conclus√£o a ser salva
     * @param projectPath Caminho do projeto onde o arquivo ser√° salvo
     */
    private async saveConclusion(conclusion: string, projectPath: string): Promise<SavedFileInfo | null> {
        try {
            // Verificar caminho
            if (!projectPath) {
                throw new Error(this.t('error.no.path'));
            }

            // Usar o m√©todo comum para preparar e salvar o conte√∫do
            return await this.prepareAndSaveContent(conclusion, projectPath, true);
        } catch (error: any) {
            this.logger.error(this.t('error.saving.conclusion'), { error });
            return null;
        }
    }

    /**
     * Adiciona texto ao arquivo de conclus√£o sem substituir o conte√∫do existente
     * @param text Texto a ser adicionado ao arquivo de conclus√£o
     * @param projectPath Caminho do projeto onde o arquivo ser√° salvo
     */
    private async appendToConclusion(text: string, projectPath: string): Promise<SavedFileInfo | null> {
        try {
            // Verificar caminho
            if (!projectPath) {
                throw new Error(this.t('error.no.path'));
            }

            // Usar o m√©todo comum para preparar e salvar o conte√∫do
            return await this.prepareAndSaveContent(text, projectPath, true);
        } catch (error: any) {
            this.logger.error(this.t('error.adding.conclusion'), { error });
            return null;
        }
    }

    /**
     * Prepara e salva conte√∫do no arquivo de conclus√£o
     * @param text Texto a ser salvo
     * @param projectPath Caminho do projeto onde salvar
     * @param isNewEntry Se √© uma entrada nova (adiciona timestamp)
     * @returns Informa√ß√µes sobre o arquivo salvo ou null em caso de erro
     */
    private async prepareAndSaveContent(
        text: string,
        projectPath: string,
        isNewEntry: boolean = true
    ): Promise<SavedFileInfo | null> {
        try {
            // Verificar caminho do projeto
            if (!projectPath) {
                throw new Error(this.t('error.no.path'));
            }

            // Criar caminhos
            const storageDir = path.resolve(projectPath, 'coconut-data');
            const conclusionPath = path.resolve(storageDir, 'conclusion.md');

            // Garantir que o diret√≥rio existe
            if (!fs.existsSync(storageDir)) {
                fs.mkdirSync(storageDir, { recursive: true });
            }

            // Preparar o conte√∫do com timestamp se for uma nova entrada
            let processedText = text;
            if (isNewEntry) {
                const now = new Date();
                const dateStr = now.toLocaleDateString();
                const timeStr = now.toLocaleTimeString();
                const timestamp = `## Entrada em ${dateStr} √†s ${timeStr}`;
                processedText = `${timestamp}\n\n${text}`;
            }

            let finalContent = "";
            const separator = "\n\n---\n\n";

            // Verificar e adicionar conte√∫do existente
            if (fs.existsSync(conclusionPath)) {
                const existingContent = await fs.promises.readFile(conclusionPath, 'utf-8');
                finalContent = existingContent + separator + processedText;
                this.logger.info(this.t('info.adding.content'));
            } else {
                finalContent = processedText;
                this.logger.info(this.t('info.creating.file'));
            }

            // Salvar o conte√∫do
            await fs.promises.writeFile(conclusionPath, finalContent);

            // Se for uma conclus√£o completa, indexar o conte√∫do para busca
            const conclusionId = `conclusion-${Date.now()}`;
            if (text.includes('## Conclus√£o da Cadeia de Pensamentos')) {
                this.indexContent(conclusionId, text);
            }

            return {
                filePath: conclusionPath,
                type: 'conclusion',
                timestamp: Date.now()
            };
        } catch (error: any) {
            const errorType = isNewEntry ? 'error.saving.conclusion' : 'error.adding.conclusion';
            this.logger.error(this.t(errorType), { error });
            return null;
        }
    }
} 